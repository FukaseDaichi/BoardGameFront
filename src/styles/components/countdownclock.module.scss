$one-second: 1s;
$easing: cubic-bezier(1, 0, 1, 0);
$digit-height: 180px;

// https://codepen.io/kindofone/pen/DkhAz

div.clock {
  .digit {
    display: inline-block;
    font-size: 200px;
    color: rgba(0, 0, 0, 0.25);
    height: $digit-height;
    line-height: 1;
  }

  .time-part-wrapper {
    display: inline-block;
    margin-right: 50px;
    position: relative;

    &:not(:last-child):after {
      content: ":";
      display: block;
      width: 30px;
      height: 230px;
      position: absolute;
      top: 0px;
      right: -30px;
      color: rgba(0, 0, 0, 0.25);
      font-size: 200px;
      line-height: 0.9;
    }
  }

  .time-part {
    width: 140px;
    text-align: center;
    height: $digit-height;
    overflow: hidden;
    display: inline-block;
    margin-left: -5px;
    box-sizing: border-box;

    .digit-wrapper {
      animation-timing-function: $easing;
    }

    &.minutes {
      &.tens .digit-wrapper {
        animation-name: minutes-tens;
        animation-duration: $one-second * 10 * 6 * 10 * 6;
        animation-iteration-count: 1;
      }
      &.ones .digit-wrapper {
        animation-name: minutes-ones;
        animation-duration: $one-second * 10 * 6 * 10;
        animation-iteration-count: 6;
      }
    }

    &.seconds {
      &.tens .digit-wrapper {
        animation-name: seconds-tens;
        animation-duration: $one-second * 10 * 6;
        animation-iteration-count: 60;
      }
      &.ones .digit-wrapper {
        animation-name: seconds-ones;
        animation-duration: $one-second * 10;
        animation-iteration-count: 360;
      }
    }

    &.hundredths {
      &.tens .digit-wrapper {
        animation-name: hundredths-tens;
        animation-duration: $one-second;
        animation-iteration-count: 3600;
      }
      &.ones .digit-wrapper {
        animation-name: hundredths-ones;
        animation-duration: $one-second / 10;
        animation-iteration-count: 36000;
      }
    }
  }
  @keyframes minutes-tens {
    $step: (100 / 6);
    $progress: 0%;
    $translate: -$digit-height;
    @while $progress < 100 {
      #{$progress} {
        transform: translateY($translate);
      }
      $progress: $progress + $step;
      $translate: $translate - $digit-height;
    }
  }

  @keyframes minutes-ones {
    $step: (100 / 10);
    $progress: 0%;
    $translate: -$digit-height;
    @while $progress < 100 {
      #{$progress} {
        transform: translateY($translate);
      }
      $progress: $progress + $step;
      $translate: $translate - $digit-height;
    }
  }

  @keyframes seconds-tens {
    $step: (100 / 6);
    $progress: 0%;
    $translate: -$digit-height;
    @while $progress < 100 {
      #{$progress} {
        transform: translateY($translate);
      }
      $progress: $progress + $step;
      $translate: $translate - $digit-height;
    }
  }
  @keyframes seconds-ones {
    $step: (100 / 10);
    $progress: 0%;
    $translate: -$digit-height;
    @while $progress < 100 {
      #{$progress} {
        transform: translateY($translate);
      }
      $progress: $progress + $step;
      $translate: $translate - $digit-height;
    }
  }

  @keyframes hundredths-tens {
    $step: (100 / 10);
    $progress: 0%;
    $translate: -$digit-height;
    @while $progress < 100 {
      #{$progress} {
        transform: translateY($translate);
      }
      $progress: $progress + $step;
      $translate: $translate - $digit-height;
    }
  }
  @keyframes hundredths-ones {
    $step: (100 / 10);
    $progress: 0%;
    $translate: -$digit-height;
    @while $progress < 100 {
      #{$progress} {
        transform: translateY($translate);
      }
      $progress: $progress + $step;
      $translate: $translate - $digit-height;
    }
  }

  .wrapper {
    margin: 100px auto;
    width: 1000px;
    position: relative;

    &:before,
    &:after {
      content: "";
      display: block;
      position: absolute;
      width: 100%;
      left: 0;
      height: 20px;
      z-index: 10;
    }

    &:before {
      top: 0px;
    }

    &:after {
      bottom: 0px;
    }
  }
}
